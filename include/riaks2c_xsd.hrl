%% HRL file generated by ERLSOM
%%
%% It is possible (and in some cases necessary) to change the name of
%% the record fields.
%%
%% It is possible to add default values, but be aware that these will
%% only be used when *writing* an xml document.


-type anyAttrib()  :: {{binary(),    %% name of the attribute
                        binary()},   %% namespace
                       binary()}.    %% value

-type anyAttribs() :: [anyAttrib()] | undefined.

%% xsd:QName values are translated to #qname{} records.
-record(qname, {uri :: binary(),
                localPart :: binary(),
                prefix :: binary(),
                mappedPrefix :: binary()}).



-record('Error', {anyAttribs :: anyAttribs(),
	'Code' :: binary(),
	'Message' :: binary(),
	'Resource' :: binary() | undefined,
	'RequestId' :: binary() | undefined,
	choice :: [any()] | undefined}).

-type 'Error'() :: #'Error'{}.


-record('MultipartUpload', {anyAttribs :: anyAttribs(),
	'Key' :: binary(),
	'UploadId' :: binary(),
	'Initiator' :: 'CanonicalUser'(),
	'Owner' :: 'CanonicalUser'(),
	'StorageClass' :: binary(),
	'Initiated' :: binary()}).

-type 'MultipartUpload'() :: #'MultipartUpload'{}.


-record('ListMultipartUploadsResult', {anyAttribs :: anyAttribs(),
	'Bucket' :: binary(),
	'KeyMarker' :: binary(),
	'UploadIdMarker' :: binary() | undefined,
	'NextKeyMarker' :: binary() | undefined,
	'NextUploadIdMarker' :: binary() | undefined,
	'Delimiter' :: binary() | undefined,
	'Prefix' :: binary() | undefined,
	'MaxUploads' :: integer(),
	'IsTruncated' :: boolean(),
	'Upload' :: ['MultipartUpload'()] | undefined,
	'CommonPrefixes' :: ['PrefixEntry'()] | undefined}).

-type 'ListMultipartUploadsResult'() :: #'ListMultipartUploadsResult'{}.


-record('MultipartUploadPart', {anyAttribs :: anyAttribs(),
	'PartNumber' :: integer(),
	'ETag' :: binary()}).

-type 'MultipartUploadPart'() :: #'MultipartUploadPart'{}.


-record('CompleteMultipartUpload', {anyAttribs :: anyAttribs(),
	'Part' :: ['MultipartUploadPart'()]}).

-type 'CompleteMultipartUpload'() :: #'CompleteMultipartUpload'{}.


-record('CompleteMultipartUploadResult', {anyAttribs :: anyAttribs(),
	'Location' :: binary(),
	'Bucket' :: binary(),
	'Key' :: binary(),
	'ETag' :: binary()}).

-type 'CompleteMultipartUploadResult'() :: #'CompleteMultipartUploadResult'{}.


-record('InitiateMultipartUploadResult', {anyAttribs :: anyAttribs(),
	'Bucket' :: binary(),
	'Key' :: binary(),
	'UploadId' :: binary()}).

-type 'InitiateMultipartUploadResult'() :: #'InitiateMultipartUploadResult'{}.


-record('TopicConfiguration', {anyAttribs :: anyAttribs(),
	'Topic' :: binary(),
	'Event' :: [binary()]}).

-type 'TopicConfiguration'() :: #'TopicConfiguration'{}.


-record('NotificationConfiguration', {anyAttribs :: anyAttribs(),
	'TopicConfiguration' :: ['TopicConfiguration'()] | undefined}).

-type 'NotificationConfiguration'() :: #'NotificationConfiguration'{}.


-record('VersioningConfiguration', {anyAttribs :: anyAttribs(),
	'Status' :: binary() | undefined,
	'MfaDelete' :: binary() | undefined}).

-type 'VersioningConfiguration'() :: #'VersioningConfiguration'{}.


-record('RequestPaymentConfiguration', {anyAttribs :: anyAttribs(),
	'Payer' :: binary()}).

-type 'RequestPaymentConfiguration'() :: #'RequestPaymentConfiguration'{}.


-record('CopyObjectResult', {anyAttribs :: anyAttribs(),
	'LastModified' :: binary(),
	'ETag' :: binary()}).

-type 'CopyObjectResult'() :: #'CopyObjectResult'{}.


-record('ListAllMyBucketsList', {anyAttribs :: anyAttribs(),
	'Bucket' :: ['ListAllMyBucketsEntry'()] | undefined}).

-type 'ListAllMyBucketsList'() :: #'ListAllMyBucketsList'{}.


-record('ListAllMyBucketsResult', {anyAttribs :: anyAttribs(),
	'Owner' :: 'CanonicalUser'(),
	'Buckets' :: 'ListAllMyBucketsList'()}).

-type 'ListAllMyBucketsResult'() :: #'ListAllMyBucketsResult'{}.


-record('ListAllMyBucketsEntry', {anyAttribs :: anyAttribs(),
	'Name' :: binary(),
	'CreationDate' :: binary()}).

-type 'ListAllMyBucketsEntry'() :: #'ListAllMyBucketsEntry'{}.


-record('ListVersionsResult', {anyAttribs :: anyAttribs(),
	'Metadata' :: ['MetadataEntry'()] | undefined,
	'Name' :: binary(),
	'Prefix' :: binary(),
	'KeyMarker' :: binary(),
	'VersionIdMarker' :: binary(),
	'NextKeyMarker' :: binary() | undefined,
	'NextVersionIdMarker' :: binary() | undefined,
	'MaxKeys' :: integer(),
	'Delimiter' :: binary() | undefined,
	'IsTruncated' :: boolean(),
	choice :: ['VersionEntry'() | 'DeleteMarkerEntry'()] | undefined,
	'CommonPrefixes' :: ['PrefixEntry'()] | undefined}).

-type 'ListVersionsResult'() :: #'ListVersionsResult'{}.


-record('ListBucketResult', {anyAttribs :: anyAttribs(),
	'Metadata' :: ['MetadataEntry'()] | undefined,
	'Name' :: binary(),
	'Prefix' :: binary(),
	'Marker' :: binary(),
	'NextMarker' :: binary() | undefined,
	'MaxKeys' :: integer(),
	'Delimiter' :: binary() | undefined,
	'IsTruncated' :: boolean(),
	'Contents' :: ['ListEntry'()] | undefined,
	'CommonPrefixes' :: ['PrefixEntry'()] | undefined}).

-type 'ListBucketResult'() :: #'ListBucketResult'{}.


-record('PrefixEntry', {anyAttribs :: anyAttribs(),
	'Prefix' :: binary()}).

-type 'PrefixEntry'() :: #'PrefixEntry'{}.


-record('DeleteMarkerEntry', {anyAttribs :: anyAttribs(),
	'Key' :: binary(),
	'VersionId' :: binary(),
	'IsLatest' :: boolean(),
	'LastModified' :: binary(),
	'Owner' :: 'CanonicalUser'() | undefined}).

-type 'DeleteMarkerEntry'() :: #'DeleteMarkerEntry'{}.


-record('VersionEntry', {anyAttribs :: anyAttribs(),
	'Key' :: binary(),
	'VersionId' :: binary(),
	'IsLatest' :: boolean(),
	'LastModified' :: binary(),
	'ETag' :: binary(),
	'Size' :: binary(),
	'Owner' :: 'CanonicalUser'() | undefined,
	'StorageClass' :: binary()}).

-type 'VersionEntry'() :: #'VersionEntry'{}.


-record('ListEntry', {anyAttribs :: anyAttribs(),
	'Key' :: binary(),
	'LastModified' :: binary(),
	'ETag' :: binary(),
	'Size' :: binary(),
	'StorageClass' :: binary(),
	'Owner' :: 'CanonicalUser'() | undefined}).

-type 'ListEntry'() :: #'ListEntry'{}.


-record('PutObjectResult', {anyAttribs :: anyAttribs(),
	'ETag' :: binary(),
	'LastModified' :: binary()}).

-type 'PutObjectResult'() :: #'PutObjectResult'{}.


-record('GetObjectResult', {anyAttribs :: anyAttribs(),
	'Status' :: 'Status'(),
	'Metadata' :: ['MetadataEntry'()] | undefined,
	'Data' :: binary() | nil,
	'LastModified' :: binary(),
	'ETag' :: binary()}).

-type 'GetObjectResult'() :: #'GetObjectResult'{}.


-record('AccessControlPolicy', {anyAttribs :: anyAttribs(),
	'Owner' :: 'CanonicalUser'(),
	'AccessControlList' :: 'AccessControlList'()}).

-type 'AccessControlPolicy'() :: #'AccessControlPolicy'{}.


-record('LocationConstraint', {anyAttribs :: anyAttribs(),
	'#text' :: binary() | undefined}).

-type 'LocationConstraint'() :: #'LocationConstraint'{}.


-record('CreateBucketConfiguration', {anyAttribs :: anyAttribs(),
	'LocationConstraint' :: 'LocationConstraint'()}).

-type 'CreateBucketConfiguration'() :: #'CreateBucketConfiguration'{}.


-record('AccessControlList', {anyAttribs :: anyAttribs(),
	'Grant' :: ['Grant'()] | undefined}).

-type 'AccessControlList'() :: #'AccessControlList'{}.


-record('Grant', {anyAttribs :: anyAttribs(),
	'Grantee' :: 'Grantee'() | 'CanonicalUser'() | 'AmazonCustomerByEmail'() | 'Group'() | 'User'(),
	'Permission' :: binary()}).

-type 'Grant'() :: #'Grant'{}.


-record('Group', {anyAttribs :: anyAttribs(),
	'URI' :: binary()}).

-type 'Group'() :: #'Group'{}.


-record('CanonicalUser', {anyAttribs :: anyAttribs(),
	'ID' :: binary(),
	'DisplayName' :: binary() | undefined}).

-type 'CanonicalUser'() :: #'CanonicalUser'{}.


-record('AmazonCustomerByEmail', {anyAttribs :: anyAttribs(),
	'EmailAddress' :: binary()}).

-type 'AmazonCustomerByEmail'() :: #'AmazonCustomerByEmail'{}.


-record('User', {anyAttribs :: anyAttribs()}).

-type 'User'() :: #'User'{}.


-record('Grantee', {anyAttribs :: anyAttribs()}).

-type 'Grantee'() :: #'Grantee'{}.


-record('LoggingSettings', {anyAttribs :: anyAttribs(),
	'TargetBucket' :: binary(),
	'TargetPrefix' :: binary(),
	'TargetGrants' :: 'AccessControlList'() | undefined}).

-type 'LoggingSettings'() :: #'LoggingSettings'{}.


-record('BucketLoggingStatus', {anyAttribs :: anyAttribs(),
	'LoggingEnabled' :: 'LoggingSettings'() | undefined}).

-type 'BucketLoggingStatus'() :: #'BucketLoggingStatus'{}.


-record('CreateBucketResult', {anyAttribs :: anyAttribs(),
	'BucketName' :: binary()}).

-type 'CreateBucketResult'() :: #'CreateBucketResult'{}.


-record('Result', {anyAttribs :: anyAttribs(),
	'Status' :: 'Status'()}).

-type 'Result'() :: #'Result'{}.


-record('Status', {anyAttribs :: anyAttribs(),
	'Code' :: integer(),
	'Description' :: binary()}).

-type 'Status'() :: #'Status'{}.


-record('MetadataEntry', {anyAttribs :: anyAttribs(),
	'Name' :: binary(),
	'Value' :: binary()}).

-type 'MetadataEntry'() :: #'MetadataEntry'{}.